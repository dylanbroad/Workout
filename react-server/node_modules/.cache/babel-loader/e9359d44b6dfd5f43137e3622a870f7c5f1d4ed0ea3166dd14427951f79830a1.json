{"ast":null,"code":"const BASE_URL = 'http://localhost:5000';\n\n// Helper function for making GET requests\nasync function get(endpoint) {\n  const response = await fetch(`${BASE_URL}${endpoint}`);\n  if (!response.ok) {\n    throw new Error(`Request failed with status ${response.status}`);\n  }\n  return response.json();\n}\n\n// Helper function for making POST requests with JSON data\nasync function post(endpoint, data) {\n  const response = await fetch(`${BASE_URL}${endpoint}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  if (!response.ok) {\n    throw new Error(`Request failed with status ${response.status}`);\n  }\n  return response.json();\n}\n\n// Fetch all workouts\nexport function fetchWorkouts() {\n  return get('/workout/all');\n}\n\n// Fetch exercises for a specific workout\nexport function fetchExercises(workoutId) {\n  return get(`/workout/exercises/${workoutId}`);\n}\nexport function fetchSets() {\n  return get('/workout/exercises/sets/${');\n}\n// Create a new workout\nexport function createWorkout(title) {\n  return post('/workout', {\n    title\n  });\n}\n\n// Create a new exercise for a workout\nexport function createExercise(workoutId, exerciseName) {\n  return post(`/workout/exercises/${workoutId}`, {\n    exercise_name: exerciseName\n  });\n}\nexport function createSets(workoutId, exerciseName) {\n  return post(`/workout/exercises/${workoutId}`, {\n    exercise_name: exerciseName\n  });\n}","map":{"version":3,"names":["BASE_URL","get","endpoint","response","fetch","ok","Error","status","json","post","data","method","headers","body","JSON","stringify","fetchWorkouts","fetchExercises","workoutId","fetchSets","createWorkout","title","createExercise","exerciseName","exercise_name","createSets"],"sources":["C:/Users/dylan/OneDrive/Desktop/Workout/react-server/src/components/APIservice.js"],"sourcesContent":["const BASE_URL = 'http://localhost:5000';\r\n\r\n// Helper function for making GET requests\r\nasync function get(endpoint) {\r\n  const response = await fetch(`${BASE_URL}${endpoint}`);\r\n  if (!response.ok) {\r\n    throw new Error(`Request failed with status ${response.status}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Helper function for making POST requests with JSON data\r\nasync function post(endpoint, data) {\r\n  const response = await fetch(`${BASE_URL}${endpoint}`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(data),\r\n  });\r\n  if (!response.ok) {\r\n    throw new Error(`Request failed with status ${response.status}`);\r\n  }\r\n  return response.json();\r\n}\r\n\r\n// Fetch all workouts\r\nexport function fetchWorkouts() {\r\n    return get('/workout/all');\r\n  }\r\n  \r\n  // Fetch exercises for a specific workout\r\n  export function fetchExercises(workoutId) {\r\n    return get(`/workout/exercises/${workoutId}`);\r\n  }\r\n  \r\n  export function fetchSets() {\r\n    return get('/workout/exercises/sets/${');\r\n  }\r\n  // Create a new workout\r\n  export function createWorkout(title) {\r\n    return post('/workout', { title });\r\n  }\r\n  \r\n  // Create a new exercise for a workout\r\n  export function createExercise(workoutId, exerciseName) {\r\n    return post(`/workout/exercises/${workoutId}`, { exercise_name: exerciseName });\r\n  }\r\n\r\n  export function createSets(workoutId, exerciseName) {\r\n    return post(`/workout/exercises/${workoutId}`, { exercise_name: exerciseName });\r\n  }\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,uBAAuB;;AAExC;AACA,eAAeC,GAAG,CAACC,QAAQ,EAAE;EAC3B,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,GAAEE,QAAS,EAAC,CAAC;EACtD,IAAI,CAACC,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,8BAA6BH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAClE;EACA,OAAOJ,QAAQ,CAACK,IAAI,EAAE;AACxB;;AAEA;AACA,eAAeC,IAAI,CAACP,QAAQ,EAAEQ,IAAI,EAAE;EAClC,MAAMP,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,QAAS,GAAEE,QAAS,EAAC,EAAE;IACrDS,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,IAAI;EAC3B,CAAC,CAAC;EACF,IAAI,CAACP,QAAQ,CAACE,EAAE,EAAE;IAChB,MAAM,IAAIC,KAAK,CAAE,8BAA6BH,QAAQ,CAACI,MAAO,EAAC,CAAC;EAClE;EACA,OAAOJ,QAAQ,CAACK,IAAI,EAAE;AACxB;;AAEA;AACA,OAAO,SAASQ,aAAa,GAAG;EAC5B,OAAOf,GAAG,CAAC,cAAc,CAAC;AAC5B;;AAEA;AACA,OAAO,SAASgB,cAAc,CAACC,SAAS,EAAE;EACxC,OAAOjB,GAAG,CAAE,sBAAqBiB,SAAU,EAAC,CAAC;AAC/C;AAEA,OAAO,SAASC,SAAS,GAAG;EAC1B,OAAOlB,GAAG,CAAC,4BAA4B,CAAC;AAC1C;AACA;AACA,OAAO,SAASmB,aAAa,CAACC,KAAK,EAAE;EACnC,OAAOZ,IAAI,CAAC,UAAU,EAAE;IAAEY;EAAM,CAAC,CAAC;AACpC;;AAEA;AACA,OAAO,SAASC,cAAc,CAACJ,SAAS,EAAEK,YAAY,EAAE;EACtD,OAAOd,IAAI,CAAE,sBAAqBS,SAAU,EAAC,EAAE;IAAEM,aAAa,EAAED;EAAa,CAAC,CAAC;AACjF;AAEA,OAAO,SAASE,UAAU,CAACP,SAAS,EAAEK,YAAY,EAAE;EAClD,OAAOd,IAAI,CAAE,sBAAqBS,SAAU,EAAC,EAAE;IAAEM,aAAa,EAAED;EAAa,CAAC,CAAC;AACjF"},"metadata":{},"sourceType":"module","externalDependencies":[]}